<?php

class Singleton {
    
    /**
     * Use constants for immutable types
     * Use descriptive names
     */
    const STRING_A     = 'A';
    const STRING_A_LONG = 'stringA';
    const STRING_B_LONG = 'stringB';
    const STRING_NON_A = '^A';
    const STRING_NON_B = '^B';
    const STRING_NON_C = '^C';
    const STRING_ABC   = 'ABC';
    const INT_A = 1;
    const INT_B = 2;
    
    /**
     * Holds an instance of Singleton
     * Use underscore (_) for private/protected methods/properties
     * 
     * @var Singleton
     */
    private static $_instance = null;

    /**
     * Always comment method functionality
     */
    private function __construct() {}

    /**
     * Method names should begin with lowercase
     * 
     * @return Singleton
     */
    public static function getSingleton() {
        if (null === self::$_instance) {
            // Use self or static for late static binding
            self::$_instance = new self();
        }

        return self::$_instance;
    }

    /**
     * Display user name
     *
     * @param string $name User-provided name
     */
    public function userEcho($name) {
        // Validate type and length
        if (!is_string($name) || !strlen($name)) {
            throw new Exception('Name is not a valid string');
        }
        
        // Clean-up; do not change output text; prevent XSS
        echo filter_var($name, FILTER_SANITIZE_STRING);
    }

    /**
     * Query by user name using prepared statments.
     *
     * @param string $name User-provided name
     */
    public function userQuery($name) {
        //assuming we have a connection $mysql
        $stmt = $mysqli->prepare('SELECT * FROM `test` WHERE `name` = ? LIMIT 1');
        $stmt->bind_param('s', $name);
    
        // Don't change the return value (null)
    }

    /**
     * Output the contents of a file.
     *
     * @param string $path User-provided file path
     */
    public function userFile($path) {
        // User paths are relative to this root
        $root = '/real/path/to/files';

        // The main point is to never allow users to perform directory traversal
        // Special characters like "." and ".." and direct root access should be forbidden
        if (!is_string($path) || !strlen($path)) {
            throw new Exception('No file path provided');
        }

        // Validate relative path, file name and extension
        if (!preg_match('%^(?:allowed_path_a|allowed_path_b)\/\w+\.(?:ext|png|jpe?g)$%i', $path)) {
            throw new Exception('Invalid file path');
        }

        // File not found
        if (!is_file("$root/$path")) {
            throw new Exception('File not found');
        }

        readfile("$root/$path");
    }

    /**
     * Nested conditions
     */
    public function nestedConditions() {
        // A long string of short-if statements is less readable than the nested ifs
        do {
            if (!$conditionA) {
                // Using a class constant instead of a local constant
                echo self::STRING_NON_A;
                break;
            }

            if (!$conditionB) {
                echo self::STRING_NON_B;
                break;
            }

            if (!$conditionC) {
                echo self::STRING_NON_C;
                break;
            }

            echo self::STRING_ABC;
        } while(false);
    }

    /**
     * Return statements
     * Brace on the same line as function definition
     */
    public function returnStatements($conditionA): bool {
        if ($conditionA) {
            echo self::STRING_A;
        }

        // Implicit boolean conversion
        return !!$conditionA;
    }

    /**
     * Null coalescing
     */
    public function nullCoalescing() {
        return $_GET['name'] ?? $_POST['name'] ?? 'nobody';
    }

    /**
     * Method chaining.
     */
    public function methodChained() {
        return $this;
    }

    /**
     * Immutables are hard to find.
     *
     * @param mixed $value
     */
    public function checkValue($value, array $immutableValues) {
        // We should't use constants (strings, ints) locally
        // Store them as class constants instead
        switch ($value) {
            case self::STRING_A_LONG:
                $result = INT_A;
                break;
                
            case self::STRING_B_LONG:
                $result = INT_B;
                break;
        }
        
        return $result;
    }

    /**
     * Check a string is a 24 hour time.
     *
     * @example "00:00:00", "23:59:59", "20:15"
     *
     * @param mixed $time24Hour
     */
    public function regexTest($time24Hour): bool {
        // No need to sanitize further, a regex will do
        // [0-9] is equivalent to \d
        // 0 left padding - so [01]\d instead of [01]?\d (02:00 instead of 2:00)
        // DRY - don't repeat yourself, the 00-59 minute/second block can appear once or twice
        // Don't use capturing blocks if you don't need them - (?:) instead of ()
        // preg_match returns 0,1 or false; expected return value is boolean
        return !!preg_match('#^(?:[01]\d|2[0-3])(?:\:[0-5]\d){1,2}$#', $time24Hour);
    }
}
