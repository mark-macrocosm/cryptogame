<?php

class Singleton {
    /**
     * holds single instance of the class.
     */
    private static $instance;

    private function __construct() {
    }

    public static function GetSingleton() {
        if (!self::$instance) {
            self::$instance = new Singleton();
        }

        return self::$instance;
    }

    /**
     * Display user name.
     *
     * @param string $name User-provided name
     */
    public function userEcho($name) {
        $name = $this->sanitizeName($name);
        if ($this->validateName($name)) {
            echo "The value of 'name' is '{$name}'";
        }
    }

    /**
     * Query by user name using prepared statments.
     *
     * @param string $name User-provided name
     */
    public function userQuery($name) {
        $name = $this->sanitizeName($name);
        if ($this->validateName($name)) {
            //assuming we have a connection $mysql
            $stmt = $mysqli->prepare('SELECT * FROM `test` WHERE `name` = ? LIMIT 1');
            $stmt->bind_param('s', $name);

            return $stmt->get_result();
        }
    }

    /**
     * Output the contents of a file.
     *
     * @param string $path User-provided file path
     */
    public function userFile($path) {
        if ($this->validateFilePath($path)) {
            readfile($path);
        }
    }

    /**
     * Nested conditions.
     */
    public function nestedConditions() {
        if (!$conditionA) {
            echo '^A';
        } elseif ($conditionA && !$conditionB) {
            echo '^B';
        } elseif ($conditionA && $conditionB && !$conditionC) {
            echo '^C';
        } elseif ($conditionA && $conditionB && $conditionC) {
            echo 'ABC';
        }
    }

    /**
     * Return statements.
     */
    public function returnStatements(): bool
    {
        if ($conditionA) {
            echo 'A';

            return true;
        }

        return false;
    }

    /**
     * Null coalescing.
     */
    public function nullCoalescing() {
        return $_GET['name'] ?? $_POST['name'] ?? 'nobody';
    }

    /**
     * Method chaining.
     */
    public function methodChained() {
        return $this;
    }

    /**
     * Immutables are hard to find.
     *
     * @param mixed $value
     */
    public function checkValue($value, array $immutableValues) {
        return $immutableValues[$value] ?? null;
    }

    /**
     * Check a string is a 24 hour time.
     *
     * @example "00:00:00", "23:59:59", "20:15"
     *
     * @param mixed $time24Hour
     */
    public function regexTest($time24Hour): bool {
        $time24Hour = preg_replace('/[^0-9\:]/', '', $time24Hour); //sanitize

        return preg_match('/([01]?[0-9]|2[0-3])(:[0-5][0-9]:[0-5][0-9]|:[0-5][0-9])/', $time24Hour); //validate
    }

    /**
     * validate User-provided name
     * pattern validate alphanumeric with spaces.
     *
     * @param string $name User-provided name
     */
    private function validateName($name) {
        return
            filter_var($name, FILTER_VALIDATE_REGEXP, [
                'options' => ['regexp' => '/[a-zA-Z1-9 ]+/'],
            ]);
    }

    /**
     * validate User-provided name
     * pattern validate alphanumeric with spaces.
     *
     * @param string $name User-provided name
     * @param mixed  $path
     */
    private function validateFilePath($path)
    {
        clearstatcache(); //clearing cache before checking
        if (false === strpos($path, "\0")
        && file_exists($path)) {
            $path = realpath($path);
            //do directory validation here as per scenario
            return true;
        }

        return false;
    }

    /**
     * santize User-provided name
     * pattern sanitize alphanumeric with comma and single colon.
     *
     * @param string $name User-provided name
     */
    private function sanitizeName($name): string {
        return preg_replace('/[^a-zA-Z1-9 ]+/', '', strip_tags(trim($name)));
    }
}
